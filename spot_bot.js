require('dotenv').config();
const express = require('express');
const cors = require('cors');
const { Spot } = require('@binance/connector');
const fs = require('fs');
const ti = require('technicalindicators');
const { loadConfig, saveConfig } = require('./config');

const app = express();
app.use(express.json());
app.use(cors());

const binance = new Spot(
	process.env.BINANCE_API_KEY,
	process.env.BINANCE_API_SECRET
);
function getTradeHistoryFile() {
	return config.paperTrading ? 'paper_trades.json' : 'trade_history.json';
}

let config = loadConfig();
let botRunning = config.botRunning || false;
let virtualBalance = config.virtualBalance || 100; // Alap√©rtelmezett virtu√°lis USDC egyenleg
let openPositions = {};

// stop-loss √©s trailing stop-loss v√°ltoz√≥k
let stopLossPrices = {};
let trailingStopLossPrices = {};

// üìå USDC egyenleg lek√©r√©se (Pap√≠rkeresked√©s eset√©n a virtu√°lis egyenleget haszn√°ljuk)
async function getUSDCBalance() {
	if (config.paperTrading) {
		return virtualBalance;
	}
	try {
		let accountInfo = await binance.account();
		let usdcBalance = accountInfo.data.balances.find((b) => b.asset === 'USDC');
		return usdcBalance ? parseFloat(usdcBalance.free) : 0;
	} catch (err) {
		console.error('‚ùå Hiba az USDC egyenleg lek√©r√©s√©ben:', err);
		return 0;
	}
}

// üìä Indik√°torok sz√°m√≠t√°sa
async function getIndicators(symbol) {
	// Ellen≈ërizz√ºk, hogy a symbol l√©tezik, √©s nem √ºres
	if (!symbol || typeof symbol !== 'string' || symbol.trim() === '') {
	  console.error("‚ùå Hiba: Hi√°nyzik a symbol param√©ter.");
	  return null;
	}
	// T√°vol√≠tsuk el a kapcsos z√°r√≥jeleket, majd konvert√°ljuk nagybet≈±ss√©
	symbol = symbol.replace(/[{}]/g, "").trim().toUpperCase();
	
	try {
	  let response = await binance.klines(symbol, '15m', { limit: 200 });
	  let closes = response.data.map((c) => parseFloat(c[4]));
	  return {
		rsi: ti.RSI.calculate({ values: closes, period: 14 }).pop(),
		sma50: ti.SMA.calculate({ values: closes, period: 50 }).pop(),
		sma200: ti.SMA.calculate({ values: closes, period: 200 }).pop(),
		currentPrice: closes[closes.length - 1],
	  };
	} catch (err) {
	  console.error('‚ùå Hiba az indik√°torok sz√°m√≠t√°s√°ban:', err);
	  return null;
	}
}
  
  

  async function trade() {
	if (!botRunning) return;
	config = loadConfig();
	// Ha nincs "symbols" t√∂mb, akkor fallback a r√©gi "symbol" vagy alap√©rtelmezett 'BTCUSDC'
	const symbols = (config.symbols && config.symbols.length > 0)
	  ? config.symbols
	  : [config.symbol || 'BTCUSDC'];
	
	if (!symbols.length) {
	  console.error("‚ùå Nincs megadva keresked√©si p√°r a konfigur√°ci√≥ban!");
	  return;
	}
	
	for (const symbol of symbols) {
	  await tradeSymbol(symbol);
	}
  }
  

// üîÑ Keresked√©si logika (V√©tel & Elad√°s)
async function tradeSymbol(symbol) {
	const indicators = await getIndicators(symbol);
	if (!indicators) return;
	const { rsi, sma50, sma200, currentPrice } = indicators;
	const usdcBalance = await getUSDCBalance();
	const buyLimit = config.buyLimit || 0;
	const availableUSDC = (usdcBalance * buyLimit) / 100;
	const quantity = availableUSDC / currentPrice;

	console.log(config.paperTrading ? ' [PAPER TRADING]' : ' Val√≥s keresked√©s');
	console.log(`${usdcBalance} USDC | ${availableUSDC} USDC`);
	console.log(
		`${symbol} | RSI: ${rsi.toFixed(2)} | SMA50: ${sma50.toFixed(
			2
		)} | SMA200: ${sma200.toFixed(2)} | ${currentPrice} USDC | ${quantity}`
	);

	// V√©teli logika: ha a RSI < 30 √©s nincs m√©g nyitott poz√≠ci√≥ az adott p√°rban
	if (rsi < 30 && !openPositions[symbol]) {
		console.log(`T√∫ladott piac! V√ÅS√ÅRL√ÅS @ ${currentPrice} USDC for ${symbol}`);
		if (config.paperTrading) {
			if (virtualBalance < availableUSDC) return;
			virtualBalance -= availableUSDC;
			openPositions[symbol] = { type: 'BUY', price: currentPrice, quantity };
			console.log(
				`[PAPER TRADE] BUY @ ${currentPrice} USDC | ${quantity.toFixed(
					6
				)} ${symbol}`
			);
		} else {
			if (usdcBalance < availableUSDC) return;
			await binance.newOrder(symbol, 'BUY', 'MARKET', { quantity });
			openPositions[symbol] = { type: 'BUY', price: currentPrice, quantity };
			console.log(`‚úÖ Val√≥s BUY @ ${currentPrice} USDC for ${symbol}`);
		}
		// Stop-Loss √©s Trailing Stop-Loss be√°ll√≠t√°sa
		stopLossPrices[symbol] = currentPrice * (1 - config.stopLossPercent / 100);
		trailingStopLossPrices[symbol] =
			currentPrice * (1 - config.trailingStopLossPercent / 100);
		saveTrade('BUY', symbol, currentPrice, quantity);
	}

	// Elad√°si logika: ha a RSI > 70 √©s van nyitott poz√≠ci√≥ az adott p√°rban
	if (rsi > 70 && openPositions[symbol]) {
		// Friss√≠tj√ºk a trailing stop-ot
		const potentialTrailingStop =
			currentPrice * (1 - config.trailingStopLossPercent / 100);
		if (potentialTrailingStop > trailingStopLossPrices[symbol]) {
			trailingStopLossPrices[symbol] = potentialTrailingStop;
		}
		// Stop-loss aktiv√°l√°sa, ha az √°r lecs√∂kken
		if (
			currentPrice <= stopLossPrices[symbol] ||
			currentPrice <= trailingStopLossPrices[symbol]
		) {
			console.log(
				`Stop-Loss aktiv√°lva! ELAD√ÅS @ ${currentPrice} USDC for ${symbol}`
			);
			if (config.paperTrading) {
				virtualBalance += currentPrice * openPositions[symbol].quantity;
				console.log(
					`[PAPER TRADE] SELL @ ${currentPrice} USDC | ${openPositions[symbol].quantity} ${symbol}`
				);
				console.log(`√öj virtu√°lis egyenleg: ${virtualBalance.toFixed(2)} USDC`);
			} else {
				await binance.newOrder(symbol, 'SELL', 'MARKET', {
					quantity: openPositions[symbol].quantity,
				});
				console.log(`‚úÖ Val√≥s SELL @ ${currentPrice} USDC for ${symbol}`);
			}
			// Profit/Loss sz√°m√≠t√°sa √©s ment√©se
			const profitLoss =
				(currentPrice - openPositions[symbol].price) *
				openPositions[symbol].quantity;
			saveTrade(
				'SELL',
				symbol,
				currentPrice,
				openPositions[symbol].quantity,
				profitLoss
			);
			// T√∂r√∂lj√ºk az adott szimb√≥lumhoz tartoz√≥ poz√≠ci√≥kat
			delete openPositions[symbol];
			delete stopLossPrices[symbol];
			delete trailingStopLossPrices[symbol];
		}
	}
}

// A f√ºggv√©nyt h√≠vjuk meg 5 m√°sodpercenk√©nt
setInterval(trade, 5 * 1000);

// üî• Trade ment√©se JSON f√°jlba
function saveTrade(type, symbol, price, quantity, profitLoss = 0) {
	let historyFile = getTradeHistoryFile();
	let history = [];

	try {
		if (fs.existsSync(historyFile)) {
			history = JSON.parse(fs.readFileSync(historyFile));
		}
	} catch (err) {
		console.error(`‚ùå Hiba a ${historyFile} olvas√°sakor:`, err);
	}

	let trade = {
		time: new Date().toISOString(),
		type,
		symbol,
		price,
		quantity,
		profitLoss,
	};
	history.push(trade);
	fs.writeFileSync(historyFile, JSON.stringify(history, null, 2));
}

// üîÑ Trade futtat√°sa id≈ëz√≠tve (5 percenk√©nt)
setInterval(tradeSymbol, 60 * 1000);

// üî• API v√©gpontok
app.get('/status', (req, res) =>
	res.json({ running: botRunning, openPositions })
);

app.get('/trade-history', (req, res) => {
	try {
		let history = fs.existsSync(historyFile)
			? JSON.parse(fs.readFileSync(historyFile))
			: [];
		res.json(history);
	} catch (err) {
		console.error('‚ùå Hiba a trade history olvas√°sakor:', err);
		res
			.status(500)
			.json({ error: 'Nem siker√ºlt lek√©rni a trade el≈ëzm√©nyeket' });
	}
});

app.post('/start', (req, res) => {
	botRunning = true;
	config.botRunning = true;
	saveConfig(config);
	res.json({ message: 'Bot elindult.' });
});

app.post('/stop', (req, res) => {
	botRunning = false;
	config.botRunning = false;
	saveConfig(config);
	res.json({ message: 'Bot le√°ll√≠tva.' });
});

// üî• Ind√≠t√°s
// app.listen(4000);

module.exports = {
	trade,         
	saveTrade,
	getIndicators,
	getUSDCBalance,
	binance
  };